stages:
  - build
  - teardown


before_script:
  - export TAG="${CI_COMMIT_REF_SLUG}"
  - if [ $TAG == "master" ]; then TAG="latest";  fi
  - export IMAGE_PATH="$CI_REGISTRY_IMAGE:$TAG"
  - echo "Fully qualified docker image name is '$IMAGE_PATH'"

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "${CI_REGISTRY_PASSWORD}" | docker login ${CI_REGISTRY} --username=${CI_REGISTRY_USER} --password-stdin
    - chmod +x bin/make.sh
    - bin/make.sh
    - docker push "${IMAGE_PATH}"
  environment:
    name: $COMMIT_REF_SLUG
    url: $CI_PROJECT_URL/container_registry#$CI_COMMIT_REF_SLUG
    on_stop: decomission


# This job is called when a feature branch is merged or deleted.
# It will take care of deleting the docker image from the registry
decomission:
  when: manual
  stage: teardown
  image: registry.gitlab.com/systemkern/s5:latest
  variables:
    GIT_STRATEGY: none                  # deactivate git checkout
    TOKEN_NAME: "PRIVATE-TOKEN:"        # workaround to not break the yaml structure in _script_ section
    REGISTRY_REPOSITORY_ID: "990440"    # Id of the Docker repo, necessary for deleting the image on decommission
  script:
    - bin/make.sh --parse #parse environment variables
    - curl --request DELETE --header "$TOKEN_NAME $GITLAB_API_TOKEN"
      https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/registry/repositories/$REGISTRY_REPOSITORY_ID/tags/$TAG
  environment:
    name: $COMMIT_REF_SLUG
    action: stop
  except:
    - tags
    - master
